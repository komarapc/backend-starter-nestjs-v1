// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String          @id @db.VarChar(21)
  username     String          @unique @db.VarChar(255)
  email        String          @unique
  password     String          @db.VarChar(255)
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  deletedAt    DateTime?       @map("deleted_at")
  HasRole      HasRoles[]
  RefreshToken RefreshTokens[]
  AuthLog      AuthLogs[]

  @@map("users")
}

model Roles {
  id        String     @id @db.VarChar(21)
  roleName  String     @unique @map("role_name") @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  HasRole   HasRoles[]

  @@map("roles")
}

model HasRoles {
  id        String    @id @db.VarChar(21)
  userId    String    @map("user_id") @db.VarChar(21)
  roleId    String    @map("role_id") @db.VarChar(21)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  User Users @relation(fields: [userId], references: [id])
  Role Roles @relation(fields: [roleId], references: [id])

  @@map("has_roles")
}

model RefreshTokens {
  id        String    @id @db.VarChar(21)
  userId    String    @map("user_id") @db.VarChar(21)
  token     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  User Users @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model AuthLogs {
  id            String    @id @db.VarChar(21)
  userId        String    @map("user_id") @db.VarChar(21)
  roleId        String    @map("role_id") @db.VarChar(21)
  token         String
  ipAddress     String?   @map("ip_address") @db.VarChar(15)
  device        String?   @db.VarChar(255)
  headerRequest Json?     @map("header_request")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  User Users @relation(fields: [userId], references: [id])

  @@map("auth_logs")
}
